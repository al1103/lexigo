const axios = require('axios');
require('dotenv').config();

// Test v·ªõi email c·ª• th·ªÉ c·ªßa user
const BASE_URL = 'http://localhost:3000/api/users';
const TEST_EMAIL = 'chube2609@gmail.com'; // Email c·ªßa user
const NEW_PASSWORD = 'Zilong2609@'; // Password m·ªõi

async function testWithSpecificEmail() {
  console.log('üß™ TEST RESET PASSWORD V·ªöI EMAIL C·ª§ TH·ªÇ\n');
  console.log(`üìß Email: ${TEST_EMAIL}`);
  console.log(`üîë New Password: ${NEW_PASSWORD}\n`);

  try {
    // Step 1: G·ª≠i forgot password
    console.log('1Ô∏è‚É£ G·ª≠i y√™u c·∫ßu forgot password...');
    try {
      const response = await axios.post(`${BASE_URL}/forgot-password`, {
        email: TEST_EMAIL
      });
      console.log(`‚úÖ Success: ${response.data.message}`);
      console.log('üìù Ki·ªÉm tra console server ƒë·ªÉ l·∫•y OTP code!\n');
    } catch (error) {
      console.log(`‚ùå Error: ${error.response?.data?.message || error.message}`);
      if (error.response?.status === 404) {
        console.log('üí° Email kh√¥ng t·ªìn t·∫°i trong database');
        console.log('   H√£y ƒëƒÉng k√Ω t√†i kho·∫£n v·ªõi email n√†y tr∆∞·ªõc\n');
      }
      return;
    }

    console.log('2Ô∏è‚É£ H∆∞·ªõng d·∫´n test ti·∫øp theo:\n');

    // H∆∞·ªõng d·∫´n test verify OTP (optional)
    console.log('üîç OPTION A: Test verify OTP tr∆∞·ªõc (khuy·∫øn ngh·ªã):');
    console.log('   curl -X POST http://localhost:3000/api/users/verify-otp \\');
    console.log('     -H "Content-Type: application/json" \\');
    console.log(`     -d '{"email":"${TEST_EMAIL}","code":"YOUR_OTP_HERE","type":"password_reset"}'`);
    console.log('');
    console.log('   ‚úÖ N·∫øu th√†nh c√¥ng, b·∫°n s·∫Ω th·∫•y: "M√£ OTP ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng"');
    console.log('');

    // H∆∞·ªõng d·∫´n reset password
    console.log('üîë OPTION B: Reset password tr·ª±c ti·∫øp:');
    console.log('   curl -X POST http://localhost:3000/api/users/reset-password \\');
    console.log('     -H "Content-Type: application/json" \\');
    console.log(`     -d '{"email":"${TEST_EMAIL}","code":"YOUR_OTP_HERE","newPassword":"${NEW_PASSWORD}"}'`);
    console.log('');

    // Show l·ªói tr∆∞·ªõc ƒë√≥ c·ªßa user
    console.log('‚ùå L·ªñI TR∆Ø·ªöC ƒê√ÇY (C·ª¶A USER):');
    console.log(`   Request SAI: {"email":"${TEST_EMAIL}","new_password":"${NEW_PASSWORD}"}`);
    console.log('   Response: {"status":400,"message":"Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt"}');
    console.log('');
    console.log('üîß NGUY√äN NH√ÇN:');
    console.log('   1. Thi·∫øu field "code" (OTP)');
    console.log('   2. Field name sai: "new_password" thay v√¨ "newPassword"');
    console.log('');

    // Correct request format
    console.log('‚úÖ REQUEST ƒê√öNG:');
    console.log(`   {"email":"${TEST_EMAIL}","code":"123456","newPassword":"${NEW_PASSWORD}"}`);
    console.log('');

    // Test v·ªõi JavaScript
    console.log('üîß JAVASCRIPT CODE ƒê√öNG:');
    console.log(`const response = await fetch('/api/users/reset-password', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: '${TEST_EMAIL}',
    code: '123456', // L·∫•y t·ª´ console server
    newPassword: '${NEW_PASSWORD}'
  })
});`);

  } catch (error) {
    console.error('‚ùå Unexpected error:', error.message);
  }
}

// Test validation errors
async function testValidationErrors() {
  console.log('\nüß™ TEST C√ÅC L·ªñI VALIDATION:\n');

  const testCases = [
    {
      name: 'Thi·∫øu email',
      data: { code: '123456', newPassword: 'test123' }
    },
    {
      name: 'Thi·∫øu code',
      data: { email: TEST_EMAIL, newPassword: 'test123' }
    },
    {
      name: 'Thi·∫øu newPassword',
      data: { email: TEST_EMAIL, code: '123456' }
    },
    {
      name: 'newPassword qu√° ng·∫Øn',
      data: { email: TEST_EMAIL, code: '123456', newPassword: '123' }
    },
    {
      name: 'Sai field name (new_password)',
      data: { email: TEST_EMAIL, code: '123456', new_password: 'test123' }
    }
  ];

  for (const testCase of testCases) {
    console.log(`${testCase.name}:`);
    try {
      await axios.post(`${BASE_URL}/reset-password`, testCase.data);
      console.log('   ‚ùå Kh√¥ng c√≥ l·ªói (kh√¥ng mong mu·ªën)');
    } catch (error) {
      console.log(`   ‚úÖ Expected error: ${error.response?.data?.message || error.message}`);
    }
  }
}

async function showCorrectWorkflow() {
  console.log('\nüìã QUY TR√åNH ƒê√öNG HO√ÄN CH·ªàNH:\n');

  console.log('// 1. G·ª≠i OTP');
  console.log(`await fetch('/api/users/forgot-password', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ email: '${TEST_EMAIL}' })
});`);

  console.log('\n// 2. (Optional) Verify OTP tr∆∞·ªõc');
  console.log(`await fetch('/api/users/verify-otp', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: '${TEST_EMAIL}',
    code: otpCode, // T·ª´ console server
    type: 'password_reset'
  })
});`);

  console.log('\n// 3. Reset password');
  console.log(`await fetch('/api/users/reset-password', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: '${TEST_EMAIL}',
    code: otpCode, // Same OTP code
    newPassword: '${NEW_PASSWORD}'
  })
});`);

  console.log('\nüí° L∆ØU √ù:');
  console.log(`   - OTP code l·∫•y t·ª´ console server`);
  console.log(`   - Field name: "newPassword" (kh√¥ng ph·∫£i "new_password")`);
  console.log(`   - C·∫ßn ƒë·∫ßy ƒë·ªß 3 fields: email, code, newPassword`);
  console.log(`   - Password ph·∫£i ‚â• 6 k√Ω t·ª±`);
}

async function runAll() {
  await testWithSpecificEmail();
  await testValidationErrors();
  await showCorrectWorkflow();

  console.log('\nüéâ T·ªîNG K·ª§T:');
  console.log('   ‚úÖ ƒê√£ x√°c ƒë·ªãnh nguy√™n nh√¢n l·ªói');
  console.log('   ‚úÖ ƒê√£ cung c·∫•p c√°ch fix');
  console.log('   ‚úÖ ƒê√£ test validation');
  console.log('   ‚úÖ ƒê√£ h∆∞·ªõng d·∫´n quy tr√¨nh ƒë√∫ng');
}

if (require.main === module) {
  runAll();
}

module.exports = { testWithSpecificEmail, testValidationErrors, showCorrectWorkflow };
