const axios = require('axios');
const { pool } = require('../config/database');
require('dotenv').config();

// C·∫•u h√¨nh API base URL
const BASE_URL = 'http://localhost:3000/api/users';

async function createTestOTP(email, type = 'general', minutesExpiry = 15) {
  try {
    console.log(`üìß T·∫°o m√£ OTP test cho ${email} (type: ${type})...`);

    // T·∫°o m√£ OTP ng·∫´u nhi√™n
    const code = Math.floor(100000 + Math.random() * 900000).toString();

    // T·∫°o user data gi·∫£ cho test
    const userData = {
      type: type,
      email: email,
      username: 'testuser',
      fullName: 'Test User',
      password: 'testpass123'
    };

    // Th·ªùi gian h·∫øt h·∫°n
    const expirationTime = new Date();
    expirationTime.setMinutes(expirationTime.getMinutes() + minutesExpiry);

    // X√≥a m√£ c≈© n·∫øu c√≥
    await pool.query('DELETE FROM verification_codes WHERE email = $1', [email]);

    // Check column structure v√† insert
    const tableInfoQuery = `
      SELECT column_name
      FROM information_schema.columns
      WHERE table_name = 'verification_codes'
    `;
    const tableInfo = await pool.query(tableInfoQuery);

    const hasExpirationTime = tableInfo.rows.some(
      (row) => row.column_name === "expiration_time"
    );
    const hasExpiresAt = tableInfo.rows.some(
      (row) => row.column_name === "expires_at"
    );

    if (hasExpiresAt) {
      // D√πng c·∫•u tr√∫c v·ªõi expires_at
      await pool.query(
        `INSERT INTO verification_codes (email, code, expires_at, code_type, verified, attempts, max_attempts, user_data, created_at, updated_at)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())`,
        [email, code, expirationTime, type, false, 0, 3, JSON.stringify(userData)]
      );
    } else {
      // D√πng c·∫•u tr√∫c v·ªõi expiration_time
      await pool.query(
        `INSERT INTO verification_codes (email, code, expiration_time, user_data, created_at)
         VALUES ($1, $2, $3, $4, NOW())`,
        [email, code, expirationTime, JSON.stringify(userData)]
      );
    }

    console.log(`‚úÖ ƒê√£ t·∫°o m√£ OTP: ${code} (h·∫øt h·∫°n sau ${minutesExpiry} ph√∫t)`);
    return code;

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o OTP test:', error.message);
    return null;
  }
}

async function testVerifyOTPBasic() {
  try {
    console.log('üß™ Test c∆° b·∫£n Verify OTP API...\n');

    const testEmail = 'test@example.com';

    // Test 1: Thi·∫øu email
    console.log('1. Test thi·∫øu email:');
    try {
      await axios.post(`${BASE_URL}/verify-otp`, {
        code: '123456',
        type: 'general'
      });
    } catch (error) {
      console.log(`   ‚úÖ Ph·∫£n h·ªìi ƒë√∫ng (${error.response?.status}): ${error.response?.data?.message}`);
    }

    // Test 2: Thi·∫øu code
    console.log('\n2. Test thi·∫øu m√£ OTP:');
    try {
      await axios.post(`${BASE_URL}/verify-otp`, {
        email: testEmail,
        type: 'general'
      });
    } catch (error) {
      console.log(`   ‚úÖ Ph·∫£n h·ªìi ƒë√∫ng (${error.response?.status}): ${error.response?.data?.message}`);
    }

    // Test 3: M√£ kh√¥ng t·ªìn t·∫°i
    console.log('\n3. Test m√£ OTP kh√¥ng t·ªìn t·∫°i:');
    try {
      await axios.post(`${BASE_URL}/verify-otp`, {
        email: testEmail,
        code: '999999',
        type: 'general'
      });
    } catch (error) {
      console.log(`   ‚úÖ Ph·∫£n h·ªìi ƒë√∫ng (${error.response?.status}): ${error.response?.data?.message}`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói trong test c∆° b·∫£n:', error.message);
  }
}

async function testVerifyOTPWithValidCodes() {
  try {
    console.log('\nüß™ Test v·ªõi m√£ OTP h·ª£p l·ªá...\n');

    const testEmail = 'test@example.com';

    // Test 4: OTP type registration
    console.log('4. Test OTP lo·∫°i registration:');
    const regCode = await createTestOTP(testEmail, 'registration', 10);
    if (regCode) {
      try {
        const response = await axios.post(`${BASE_URL}/verify-otp`, {
          email: testEmail,
          code: regCode,
          type: 'registration'
        });
        console.log(`   ‚úÖ Th√†nh c√¥ng (${response.status}): ${response.data.message}`);
        console.log(`   üìä Data: type=${response.data.data.type}, verified=${response.data.data.verified}`);
        if (response.data.data.userData) {
          console.log(`   üë§ User data: ${Object.keys(response.data.data.userData).join(', ')}`);
        }
      } catch (error) {
        console.log(`   ‚ùå L·ªói (${error.response?.status}): ${error.response?.data?.message}`);
      }
    }

    // Test 5: OTP type password_reset
    console.log('\n5. Test OTP lo·∫°i password_reset:');
    const passCode = await createTestOTP(testEmail, 'password_reset', 10);
    if (passCode) {
      try {
        const response = await axios.post(`${BASE_URL}/verify-otp`, {
          email: testEmail,
          code: passCode,
          type: 'password_reset'
        });
        console.log(`   ‚úÖ Th√†nh c√¥ng (${response.status}): ${response.data.message}`);
        console.log(`   üìä Data: type=${response.data.data.type}, verified=${response.data.data.verified}`);
        if (response.data.data.userData) {
          console.log(`   üë§ User data: C√≥ userData`);
        } else {
          console.log(`   üîí Security: Kh√¥ng tr·∫£ v·ªÅ userData cho password_reset (ƒë√∫ng)`);
        }
      } catch (error) {
        console.log(`   ‚ùå L·ªói (${error.response?.status}): ${error.response?.data?.message}`);
      }
    }

    // Test 6: OTP type general
    console.log('\n6. Test OTP lo·∫°i general:');
    const genCode = await createTestOTP(testEmail, 'general', 10);
    if (genCode) {
      try {
        const response = await axios.post(`${BASE_URL}/verify-otp`, {
          email: testEmail,
          code: genCode
          // kh√¥ng truy·ªÅn type, s·∫Ω default l√† 'general'
        });
        console.log(`   ‚úÖ Th√†nh c√¥ng (${response.status}): ${response.data.message}`);
        console.log(`   üìä Data: type=${response.data.data.type}, verified=${response.data.data.verified}`);
      } catch (error) {
        console.log(`   ‚ùå L·ªói (${error.response?.status}): ${error.response?.data?.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå L·ªói trong test m√£ h·ª£p l·ªá:', error.message);
  }
}

async function testVerifyOTPExpiration() {
  try {
    console.log('\nüß™ Test OTP h·∫øt h·∫°n...\n');

    const testEmail = 'expired@example.com';

    // T·∫°o OTP h·∫øt h·∫°n (0 ph√∫t = h·∫øt h·∫°n ngay)
    console.log('7. Test OTP ƒë√£ h·∫øt h·∫°n:');
    const expiredCode = await createTestOTP(testEmail, 'general', -1); // -1 ph√∫t = h·∫øt h·∫°n
    if (expiredCode) {
      try {
        await axios.post(`${BASE_URL}/verify-otp`, {
          email: testEmail,
          code: expiredCode,
          type: 'general'
        });
      } catch (error) {
        console.log(`   ‚úÖ Ph·∫£n h·ªìi ƒë√∫ng (${error.response?.status}): ${error.response?.data?.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå L·ªói trong test h·∫øt h·∫°n:', error.message);
  }
}

async function runAllTests() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test to√†n b·ªô Verify OTP API...\n');

    // Test c∆° b·∫£n
    await testVerifyOTPBasic();

    // Test v·ªõi m√£ h·ª£p l·ªá
    await testVerifyOTPWithValidCodes();

    // Test h·∫øt h·∫°n
    await testVerifyOTPExpiration();

    console.log('\nüéâ Ho√†n th√†nh t·∫•t c·∫£ tests!');
    console.log('\nüìã T√≥m t·∫Øt:');
    console.log('   ‚úÖ Test validation inputs');
    console.log('   ‚úÖ Test c√°c lo·∫°i OTP kh√°c nhau');
    console.log('   ‚úÖ Test security (·∫©n userData cho password_reset)');
    console.log('   ‚úÖ Test OTP h·∫øt h·∫°n');
    console.log('\nüí° L∆∞u √Ω:');
    console.log('   - API n√†y ch·ªâ verify OTP, kh√¥ng th·ª±c hi·ªán action (t·∫°o user, ƒë·ªïi password)');
    console.log('   - ƒê·ªÉ th·ª±c hi·ªán action, s·ª≠ d·ª•ng /verify-registration ho·∫∑c /reset-password');

  } catch (error) {
    console.error('‚ùå L·ªói trong test t·ªïng th·ªÉ:', error.message);
  } finally {
    // Cleanup: x√≥a test data
    try {
      await pool.query('DELETE FROM verification_codes WHERE email LIKE $1', ['%example.com']);
      console.log('\nüßπ ƒê√£ x√≥a d·ªØ li·ªáu test');
    } catch (cleanupError) {
      console.log('\n‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu test:', cleanupError.message);
    }

    // ƒê√≥ng connection
    if (pool && pool.end) {
      await pool.end();
    }
  }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  runAllTests();
}

module.exports = {
  testVerifyOTPBasic,
  testVerifyOTPWithValidCodes,
  testVerifyOTPExpiration,
  createTestOTP,
  runAllTests
};
