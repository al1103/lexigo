const quizModel = require('../models/quiz_model');
const LevelModel = require('../models/level_model'); // Th√™m import
const ApiResponse = require('../utils/apiResponse');
const UserModel = require('../models/user_model');

const quizController = {
  // B·∫Øt ƒë·∫ßu quiz session m·ªõi ho·∫∑c ti·∫øp t·ª•c session ƒëang c√≥
  startQuizSession: async (req, res) => {
    try {
      console.log('üéØ Starting quiz session with body:', req.body);

      const { level_id, question_count = 10, force_new = false } = req.body;
      const userId = req.user?.userId || req.user?.id;

      if (!userId) {
        console.log('‚ùå No user ID found');
        return ApiResponse.error(res, 401, 'User authentication required');
      }

      if (!level_id) {
        console.log('‚ùå No level ID provided');
        return ApiResponse.error(res, 400, 'Level ID is required');
      }

      console.log('üë§ User ID:', userId, 'Level ID:', level_id, 'Force new:', force_new);

      // L·∫•y th√¥ng tin level t·ª´ database
      const level = await LevelModel.getLevelById(level_id);

      if (!level) {
        console.log('‚ùå Level not found for ID:', level_id);
        return ApiResponse.error(res, 404, 'Level not found');
      }

      console.log('‚úÖ Level found:', level.level_code, '-', level.level_name);

      // Ki·ªÉm tra c√≥ questions kh√¥ng cho level n√†y
      const totalAvailableQuestions = await quizModel.checkQuestionsExist(level.level_code);

      if (totalAvailableQuestions === 0) {
        console.log('‚ùå No questions found for level:', level.level_code);
        return ApiResponse.error(res, 404, `No questions found for ${level.level_name} level`);
      }

      let session = null;
      let questions = [];
      let isResuming = false;
      let currentProgress = 0;

      // Ki·ªÉm tra session ƒëang active (n·∫øu kh√¥ng force_new)
      if (!force_new) {
        const activeSession = await quizModel.getActiveSession(userId, level_id);

        if (activeSession) {
          console.log('üîÑ Found active session:', activeSession.id);
          console.log('üìä Progress:', activeSession.answered_questions, '/', activeSession.total_questions);

          session = { id: activeSession.id };
          isResuming = true;
          currentProgress = activeSession.answered_questions;

          // T√≠nh s·ªë c√¢u h·ªèi c√≤n l·∫°i c·∫ßn thi·∫øt
          const targetTotal = activeSession.total_questions || question_count;
          const remainingNeeded = targetTotal - activeSession.answered_questions;

          if (remainingNeeded > 0) {
            // L·∫•y c√¢u h·ªèi c√≤n l·∫°i V·ªöI BOOKMARK STATUS
            questions = await quizModel.getRemainingQuestions(
              activeSession.id,
              level.level_code,
              remainingNeeded,
              userId // Th√™m userId parameter
            );

            // N·∫øu session ch∆∞a c√≥ total_questions, c·∫≠p nh·∫≠t n√≥
            if (!activeSession.total_questions) {
              const newTotal = activeSession.answered_questions + questions.length;
              await quizModel.updateSessionTotalQuestions(activeSession.id, newTotal);
              console.log('üìù Updated session total questions to:', newTotal);
            }
          } else {
            // Session ƒë√£ ho√†n th√†nh
            console.log('‚úÖ Session already completed');
            return ApiResponse.success(res, '200', 'Quiz session already completed', {
              session_id: activeSession.id,
              is_completed: true,
              total_questions: activeSession.total_questions,
              answered_questions: activeSession.answered_questions,
              message: 'You have already completed this quiz. Set force_new=true to start a new session.'
            });
          }
        }
      }

      // T·∫°o session m·ªõi n·∫øu kh√¥ng c√≥ active session ho·∫∑c force_new
      if (!session) {
        console.log('üÜï Creating new session...');
        session = await quizModel.createQuizSession(userId, level_id, level.level_code);

        // L·∫•y c√¢u h·ªèi m·ªõi V·ªöI BOOKMARK STATUS
        const requestedCount = Math.min(question_count, totalAvailableQuestions);
        questions = await quizModel.getQuestionsByLevel(
          level.level_code,
          requestedCount,
          userId // Th√™m userId parameter
        );

        // C·∫≠p nh·∫≠t total_questions cho session m·ªõi
        if (questions.length > 0) {
          await quizModel.updateSessionTotalQuestions(session.id, questions.length);
        }
      }

      if (questions.length === 0) {
        return ApiResponse.error(res, 404, 'No more questions available for this level');
      }

      const responseMessage = isResuming
        ? `Continuing quiz from question ${currentProgress + 1}`
        : 'Quiz session started successfully';

      console.log(`‚úÖ Quiz ${isResuming ? 'resumed' : 'started'} with ${questions.length} questions for level: ${level.level_name}`);

      return ApiResponse.success(res, '200', responseMessage, {
        session_id: session.id,
        session_info: {
          is_resuming: isResuming,
          current_progress: currentProgress,
          remaining_questions: questions.length,
          total_available_questions: totalAvailableQuestions
        },
        contents: questions.map(q => ({
          question_id: q.question_id,
          question_text: q.question_text,
          question_type: q.question_type,
          points: q.points,
          word: {
            id: q.word_id,
            word: q.word,
            pronunciation: q.pronunciation,
            meaning: q.meaning,
            definition: q.definition,
            example_sentence: q.example_sentence,
            audio_url: q.audio_url,
            image_url: q.image_url,
            // BOOKMARK INFORMATION (simplified)
            is_bookmarked: q.is_bookmarked,
            bookmark_notes: q.bookmark_notes
            // Lo·∫°i b·ªè bookmarked_at v√¨ kh√¥ng c√≥ column n√†y
          },
          options: q.options
        }))
      });
    } catch (error) {
      console.error('‚ùå Error starting quiz session:', error);
      return ApiResponse.error(res, 500, 'Failed to start quiz session: ' + error.message);
    }
  },

  // C·∫≠p nh·∫≠t getQuizSetupInfo ƒë·ªÉ tr·∫£ v·ªÅ level_id
  getQuizSetupInfo: async (req, res) => {
    try {
      console.log('üîç Getting quiz setup information...');

      // L·∫•y levels t·ª´ database v·ªõi stats
      const levels = await LevelModel.getLevelsWithStats();

      // Ch·ªâ l·∫•y levels c√≥ questions
      const availableLevels = levels.filter(level => level.question_count > 0);

      const setupInfo = {
        available_levels: availableLevels.map(level => ({
          id: level.id, // Th√™m ID
          level_code: level.level_code,
          name: level.level_name,
          name_vi: level.level_name_vi,
          description: level.description,
          description_vi: level.description_vi,
          total_questions: level.question_count,
          total_words: level.word_count,
          user_count: level.user_count,
          color: level.color,
          icon: level.icon,
          min_score: level.min_score,
          max_score: level.max_score,
          sort_order: level.sort_order
        })),

        question_count_options: [5, 10, 15, 20, 25],

        default_settings: {
          level_id: availableLevels.length > 0 ? availableLevels[0].id : null,
          question_count: 10
        },

        total_levels: availableLevels.length
      };

      return ApiResponse.success(res, '200', 'Quiz setup info retrieved successfully', setupInfo);
    } catch (error) {
      console.error('‚ùå Error getting quiz setup info:', error);
      return ApiResponse.error(res, 500, 'Failed to get quiz setup info');
    }
  },

  // Submit c√¢u tr·∫£ l·ªùi - C·∫¨P NH·∫¨T ƒë·ªÉ t√≠nh ƒëi·ªÉm
  submitAnswer: async (req, res) => {
    try {
      const { session_id, question_id, selected_option_id, response_time = 0 } = req.body;
      const userId = req.user?.userId || req.user?.id;

      if (!session_id || !question_id || !selected_option_id) {
        return ApiResponse.error(res, 400, 'Missing required fields');
      }

      const result = await quizModel.submitAnswer(
        session_id,
        question_id,
        selected_option_id,
        response_time
      );

      // N·∫æU ƒê√öNG: Update ƒëi·ªÉm ngay l·∫≠p t·ª©c cho weekly/monthly tracking
      if (result.is_correct && userId) {
        try {
          // L·∫•y ƒëi·ªÉm c·ªßa c√¢u h·ªèi
          const points = 10; // Default 10 ƒëi·ªÉm

          // Update total points v√† weekly/monthly points v·ªõi error handling
          try {
            await UserModel.updateUserPoints(userId, points, 'quiz_completion');
            console.log(`‚úÖ Added ${points} points to user ${userId} for correct answer`);
          } catch (pointsError) {
            console.error('Points update error (continuing):', pointsError.message);
            // Ti·∫øp t·ª•c th·ª±c hi·ªán c√°c t√°c v·ª• kh√°c
          }

          // Update words mastered n·∫øu tr·∫£ l·ªùi ƒë√∫ng
          try {
            // L·∫•y word_id t·ª´ question
            const questionInfo = await quizModel.getQuestionInfo(question_id);
            if (questionInfo && questionInfo.word_id) {
              const isNewWord = await UserModel.updateWordsMastered(userId, questionInfo.word_id);
              if (isNewWord) {
                console.log(`üìö User ${userId} mastered new word: ${questionInfo.word_id}`);
              }
            }
          } catch (wordsError) {
            console.error('Words mastered update error (continuing):', wordsError.message);
            // Ti·∫øp t·ª•c th·ª±c hi·ªán
          }

          // Update user activity ƒë·ªÉ tƒÉng streak (m·ªói ng√†y ch·ªâ tƒÉng 1 l·∫ßn)
          try {
            console.log(`üî• Updated activity/streak for user ${userId}`);
          } catch (streakError) {
            if (streakError.code === '42P01') {
              console.log('‚ÑπÔ∏è User stats tables not yet created. Run: node utils/setupUserStats.js');
            } else {
              console.error('Streak update error (continuing):', streakError.message);
            }
            // Ti·∫øp t·ª•c th·ª±c hi·ªán
          }

        } catch (pointError) {
          console.error('Error in post-answer processing:', pointError);
          // Kh√¥ng throw error v√¨ submit answer ƒë√£ th√†nh c√¥ng
        }
      }

      // üÜï UPDATE QUIZ ANSWER STATISTICS & STREAK
      if (userId) {
        try {
          await UserModel.updateQuizAnswer(userId, result.is_correct);
          console.log(`üìä Updated quiz answer stats for user ${userId}, correct: ${result.is_correct}`);

          // üî• Update streak cho m·ªçi ho·∫°t ƒë·ªông quiz (kh√¥ng ch·ªâ khi ƒë√∫ng)
          await UserModel.updateStreak(userId);
        } catch (statsError) {
          console.error('Quiz answer stats update error (continuing):', statsError.message);
          // Ti·∫øp t·ª•c th·ª±c hi·ªán
        }
      }

      return ApiResponse.success(res, '200', 'Answer submitted successfully', {
        is_correct: result.is_correct,
        response_id: result.id,
        points_earned: result.is_correct ? ( 10) : 0
      });
    } catch (error) {
      console.error('Error submitting answer:', error);
      return ApiResponse.error(res, 500, 'Failed to submit answer');
    }
  },

  // Ho√†n th√†nh quiz - C·∫¨P NH·∫¨T ƒë·ªÉ t√≠nh t·ªïng ƒëi·ªÉm
  completeQuiz: async (req, res) => {
    try {
      const { session_id } = req.body;
      const userId = req.user?.userId || req.user?.id;

      if (!session_id) {
        return ApiResponse.error(res, 400, 'Session ID is required');
      }

      const result = await quizModel.completeQuizSession(session_id);

      // Update ƒëi·ªÉm bonus cho vi·ªác ho√†n th√†nh quiz
      if (userId && result.score > 0) {
        try {
          // Bonus ƒëi·ªÉm d·ª±a tr√™n t·ª∑ l·ªá ƒë√∫ng
          const correctPercentage = (result.correct_answers / result.total_questions) * 100;
          let bonusPoints = 0;

          if (correctPercentage >= 90) {
            bonusPoints = 50; // Excellent bonus
          } else if (correctPercentage >= 70) {
            bonusPoints = 30; // Good bonus
          } else if (correctPercentage >= 50) {
            bonusPoints = 15; // Fair bonus
          }

          if (bonusPoints > 0) {
            await UserModel.updateUserPoints(userId, bonusPoints, 'quiz_completion');
            console.log(`üéâ Added ${bonusPoints} bonus points to user ${userId} for quiz completion`);
          }

          // Streak ƒë√£ ƒë∆∞·ª£c update trong submitAnswer, kh√¥ng c·∫ßn update l·∫°i
          // Ch·ªâ log th√¥ng b√°o ho√†n th√†nh
          console.log(`üéØ Quiz completed by user ${userId} with ${correctPercentage.toFixed(1)}% accuracy`);

        } catch (pointError) {
          console.error('Error updating completion bonus:', pointError);
        }
      }

      // üÜï UPDATE QUIZ COMPLETION STATISTICS
      if (userId) {
        try {
          const quizzesCompleted = await UserModel.updateQuizCompletion(userId);
          console.log(`üéØ Updated quiz completion count to ${quizzesCompleted} for user ${userId}`);
        } catch (statsError) {
          console.error('Quiz completion stats update error (continuing):', statsError.message);
          // Ti·∫øp t·ª•c th·ª±c hi·ªán
        }
      }

      // L·∫•y rank hi·ªán t·∫°i c·ªßa user sau khi update ƒëi·ªÉm
      let currentRankings = null;
      if (userId) {
        try {
          const rankings = {};
          for (const type of ['global', 'weekly', 'monthly']) {
            const rankInfo = await UserModel.getUserRank(userId, type);
            rankings[type] = {
              rank: rankInfo?.rank || null,
              points: rankInfo?.points || 0
            };
          }
          currentRankings = rankings;
        } catch (rankError) {
          console.error('Error getting updated rankings:', rankError);
        }
      }

      return ApiResponse.success(res, '200', 'Quiz completed successfully', {
        session_id: result.id,
        total_questions: result.total_questions,
        correct_answers: result.correct_answers,
        score: result.score,
        completed_at: result.completed_at,
        performance: {
          accuracy: Math.round((result.correct_answers / result.total_questions) * 100),
          bonus_points: result.correct_answers > 0 ? Math.round(result.score / result.correct_answers) : 0
        },
        current_rankings: currentRankings
      });
    } catch (error) {
      console.error('Error completing quiz:', error);
      return ApiResponse.error(res, 500, 'Failed to complete quiz');
    }
  },

  // Bookmark t·ª´
  bookmarkWord: async (req, res) => {
    try {
      const word_id = req.query.word_id || req.query.id || req.body.word_id;
      const notes = req.query.notes || req.body.notes;
      const userId = req.user?.userId || req.user?.id;

      if (!userId || !word_id) {
        return ApiResponse.error(res, 400, 'User ID and word ID are required');
      }

      const bookmark = await quizModel.bookmarkWord(userId, word_id, notes);

      return ApiResponse.success(res, '200', 'Word bookmarked successfully', bookmark);
    } catch (error) {
      console.error('Error bookmarking word:', error);
      return ApiResponse.error(res, 500, 'Failed to bookmark word');
    }
  },

  // L·∫•y bookmarks
  getBookmarks: async (req, res) => {
    try {
      const { page = 1, limit = 20 } = req.query;
      const userId = req.user?.userId || req.user?.id;

      if (!userId) {
        return ApiResponse.error(res, 401, 'User authentication required');
      }

      const result = await quizModel.getUserBookmarks(userId, parseInt(page), parseInt(limit));

      return ApiResponse.success(res, '200', 'Bookmarks retrieved successfully', result);
    } catch (error) {
      console.error('Error getting bookmarks:', error);
      return ApiResponse.error(res, 500, 'Failed to get bookmarks');
    }
  },

  // L·∫•y l·ªãch s·ª≠ quiz
  getQuizHistory: async (req, res) => {
    try {
      const { page = 1, limit = 20 } = req.query;
      const userId = req.user?.userId || req.user?.id;

      if (!userId) {
        return ApiResponse.error(res, 401, 'User authentication required');
      }

      const result = await quizModel.getQuizHistory(userId, parseInt(page), parseInt(limit));

      return ApiResponse.success(res, '200', 'Quiz history retrieved successfully', result);
    } catch (error) {
      console.error('Error getting quiz history:', error);
      return ApiResponse.error(res, 500, 'Failed to get quiz history');
    }
  },

  // X√≥a bookmark t·ª´ v·ª±ng
  deleteBookmark: async (req, res) => {
    try {
      const word_id = req.query.word_id || req.query.id;
      const userId = req.user?.userId || req.user?.id;
      console.log('üîç Deleting bookmark for user:', userId, 'word:', word_id);

      if (!userId || !word_id) {
        return ApiResponse.error(res, 400, 'User ID v√† word ID l√† b·∫Øt bu·ªôc');
      }
      console.log('üîç Deleting bookmark for user:', userId, 'word:', word_id);

      const deleted = await quizModel.deleteBookmark(userId, word_id);
      if (deleted) {
        return ApiResponse.success(res, '200', 'ƒê√£ x√≥a bookmark th√†nh c√¥ng', deleted);
      } else {
        return ApiResponse.error(res, 404, 'Bookmark kh√¥ng t·ªìn t·∫°i');
      }
    } catch (error) {
      console.error('Error deleting bookmark:', error);
      return ApiResponse.error(res, 500, 'X√≥a bookmark th·∫•t b·∫°i');
    }
  },

  // ADMIN: L·∫•y t·∫•t c·∫£ quiz sessions
  getAllQuizSessions: async (req, res) => {
    try {
      const sessions = await quizModel.getAllQuizSessions();
      return ApiResponse.success(res, '200', 'L·∫•y t·∫•t c·∫£ quiz sessions th√†nh c√¥ng', sessions);
    } catch (error) {
      return ApiResponse.error(res, 500, 'Kh√¥ng th·ªÉ l·∫•y quiz sessions', error.message);
    }
  },

  // ADMIN: X√≥a quiz session
  deleteQuizSession: async (req, res) => {
    try {
      const { id } = req.params;
      const deleted = await quizModel.deleteQuizSession(id);
      if (deleted) {
        return ApiResponse.success(res, '200', 'ƒê√£ x√≥a quiz session', deleted);
      } else {
        return ApiResponse.error(res, 404, 'Quiz session kh√¥ng t·ªìn t·∫°i');
      }
    } catch (error) {
      return ApiResponse.error(res, 500, 'Kh√¥ng th·ªÉ x√≥a quiz session', error.message);
    }
  },

  // ADMIN: Th√™m c√¢u h·ªèi m·ªõi
  createQuestion: async (req, res) => {
    try {
      const question = await quizModel.createQuestion(req.body);
      return ApiResponse.success(res, '200', 'T·∫°o c√¢u h·ªèi th√†nh c√¥ng', question);
    } catch (error) {
      return ApiResponse.error(res, 500, 'Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi', error.message);
    }
  },

  // ADMIN: S·ª≠a c√¢u h·ªèi
  updateQuestion: async (req, res) => {
    try {
      const { id } = req.params;
      const updated = await quizModel.updateQuestion(id, req.body);
      if (updated) {
        return ApiResponse.success(res, '200', 'C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng', updated);
      } else {
        return ApiResponse.error(res, 404, 'C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i');
      }
    } catch (error) {
      return ApiResponse.error(res, 500, 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¢u h·ªèi', error.message);
    }
  },

  // ADMIN: X√≥a c√¢u h·ªèi
  deleteQuestion: async (req, res) => {
    try {
      const { id } = req.params;
      const deleted = await quizModel.deleteQuestion(id);
      if (deleted) {
        return ApiResponse.success(res, '200', 'ƒê√£ x√≥a c√¢u h·ªèi', deleted);
      } else {
        return ApiResponse.error(res, 404, 'C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i');
      }
    } catch (error) {
      return ApiResponse.error(res, 500, 'Kh√¥ng th·ªÉ x√≥a c√¢u h·ªèi', error.message);
    }
  },
};

module.exports = quizController;
