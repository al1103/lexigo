require("dotenv").config();
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const UserModel = require("../models/user_model");
const { pool } = require("../config/database");
const { sendRandomCodeEmail } = require("../server/server");
const { getPaginationParams } = require("../utils/pagination");
const cloudinary = require("../config/cloudinary");
const fs = require("fs");
const path = require("path");
const { v4: uuidv4 } = require("uuid");
const ApiResponse = require("../utils/apiResponse");
const getAvatarListFromDb = require("../utils/avatarList");



const userController = {
  // ƒêƒÉng k√Ω user m·ªõi
  register: async (req, res) => {
    try {
      const {
        username,
        email,
        password,
        fullName,
      } = req.body;

      // Basic validation
      if (!username || !email || !password || !fullName) {
        return res.status(400).json({
          status: 400,
          message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin",
        });
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({
          status: 400,
          message: "Email kh√¥ng h·ª£p l·ªá",
        });
      }

      // Validate password strength (min 6 characters)
      if (password.length < 6) {
        return res.status(400).json({
          status: 400,
          message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
        });
      }

      // Check if username or email already exists
      const existingUserQuery = `
      SELECT 1 FROM users
      WHERE username = $1 OR email = $2
    `;
      const existingUserResult = await pool.query(existingUserQuery, [
        username,
        email,
      ]);

      if (existingUserResult.rows.length > 0) {
        return res.status(400).json({
          status: 400,
          message: "Email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
        });
      }

      // Generate verification code (6 digits)
      const code = Math.floor(100000 + Math.random() * 900000).toString();

      // Store password as is (no hashing)
      const plainPassword = password;

      // Store temporary user data
      const userData = {
        username,
        email,
        password: plainPassword,
        fullName,
      };

      console.log("Storing registration data for verification:", {
        ...userData,
        password: "[PLAIN]",
      });

      // Create expiration time (10 minutes from now)
      const expirationTime = new Date();
      expirationTime.setMinutes(expirationTime.getMinutes() + 10);

      // First delete any existing record with this email
      await pool.query(`DELETE FROM verification_codes WHERE email = $1`, [
        email,
      ]);

      // Check if verification_codes table exists and has the correct column name
      try {
        const tableInfoQuery = `
        SELECT column_name
        FROM information_schema.columns
        WHERE table_name = 'verification_codes'
      `;
        const tableInfo = await pool.query(tableInfoQuery);
        console.log(
          "Verification_codes columns:",
          tableInfo.rows.map((row) => row.column_name)
        );

        const hasExpirationTime = tableInfo.rows.some(
          (row) => row.column_name === "expiration_time"
        );
        const hasExpiresAt = tableInfo.rows.some(
          (row) => row.column_name === "expires_at"
        );

        // Use the correct column name based on what's available
        const expirationColumnName = hasExpirationTime
          ? "expiration_time"
          : hasExpiresAt
          ? "expires_at"
          : "expiration_time";

        console.log(
          `Using column name: ${expirationColumnName} for expiration time`
        );

        // Insert the new verification record using the correct column name and table structure
        if (hasExpiresAt) {
          // Use the existing table structure with expires_at and user_data
          await pool.query(
            `INSERT INTO verification_codes (email, code, expires_at, code_type, verified, attempts, max_attempts, user_data, created_at, updated_at)
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())`,
            [email, code, expirationTime, 'registration', false, 0, 3, JSON.stringify(userData)]
          );
        } else {
          // Use the new table structure with expiration_time and user_data
          await pool.query(
            `INSERT INTO verification_codes (email, code, ${expirationColumnName}, user_data, created_at)
             VALUES ($1, $2, $3, $4, NOW())`,
            [email, code, expirationTime, JSON.stringify(userData)]
          );
        }
      } catch (dbError) {
        console.error("Database error during table check:", dbError);
        // If the table doesn't exist or other DB issues, create it
        await pool.query(`
        CREATE TABLE IF NOT EXISTS verification_codes (
          id SERIAL PRIMARY KEY,
          email VARCHAR(255) NOT NULL,
          code VARCHAR(10) NOT NULL,
          expiration_time TIMESTAMP NOT NULL,
          user_data JSONB NOT NULL,
          created_at TIMESTAMP DEFAULT NOW()
        )
      `);

        // Then try the insert again with the new structure
        await pool.query(
          `INSERT INTO verification_codes (email, code, expiration_time, user_data, created_at)
         VALUES ($1, $2, $3, $4, NOW())`,
          [email, code, expirationTime, JSON.stringify(userData)]
        );
      }

      // Log the code being sent (for development only, remove in production)
      console.log(`Verification code ${code} for ${email}`);

      // Send verification email
      try {
        await sendRandomCodeEmail(email, code);
        console.log(`Verification email sent to ${email}`);
      } catch (emailError) {
        console.error("Error sending verification email:", emailError);
        return res.status('500').json({
          status: '500',
          message: "Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.",
        });
      }

      return res.status('200').json({
        status: '200',
        message: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ x√°c nh·∫≠n",
        data: { email, code },
      });
    } catch (error) {
      console.error("L·ªói ƒëƒÉng k√Ω:", error);
      return res.status('500').json({
        status: '500',
        message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω",
        error: error.message,
      });
    }
  },

  // ƒêƒÉng nh·∫≠p
  login: async (req, res) => {
    try {
      const { email, password } = req.body;
      console.log("Login attempt with email:", email);

      // Validation
      if (!email || !password) {
        return ApiResponse.error(res, 400, "Email and password are required");
      }

      // Login user
      const loginResult = await UserModel.login(email, password);

      return ApiResponse.success(res, '200', "Login successful", loginResult);
    } catch (error) {
      console.error("Login error:", error);

      if (error.message === "User not found" || error.message === "Invalid password") {
        return ApiResponse.error(res, 401, "Invalid email or password");
      }

      return ApiResponse.error(res, 500, "Login failed");
    }
  },

  // L·∫•y profile user
  getProfile: async (req, res) => {
    try {
      const userId = req.user.userId;

      const user = await UserModel.getUserWithStats(userId);

      if (!user) {
        return ApiResponse.error(res, 404, "User not found");
      }

      return ApiResponse.success(res, '200', "Profile retrieved successfully",   user );
    } catch (error) {
      console.error("Get profile error:", error);
      return ApiResponse.error(res, 500, "Failed to get profile");
    }
  },

  // C·∫≠p nh·∫≠t profile
  updateProfile: async (req, res) => {
    try {
      const userId = req.user.userId;
      const { username, full_name } = req.body;

      console.log('üîß Update Profile Request:', {
        userId,
        username,
        full_name,
        emailRemoved: 'Email updates are disabled for security',
        avatarRemoved: 'Avatar updates are disabled - use /upload-avatar instead'
      });

      const updatedUser = await UserModel.updateProfile(userId, {
        username,
        full_name,
      });

      return ApiResponse.success(res, '200', "Profile updated successfully", {
        user: updatedUser,
      });
    } catch (error) {
      console.error("Update profile error:", error);
      return ApiResponse.error(res, 500, "Failed to update profile");
    }
  },

  // ƒê·ªïi m·∫≠t kh·∫©u
  changePassword: async (req, res) => {
    try {
      const userId = req.user.userId;
      const { current_password, new_password } = req.body;

      if (!current_password || !new_password) {
        return ApiResponse.error(res, 400, "Current password and new password are required");
      }

      if (new_password.length < 6) {
        return ApiResponse.error(res, 400, "New password must be at least 6 characters long");
      }

      await UserModel.changePassword(userId, current_password, new_password);

      return ApiResponse.success(res, '200', "Password changed successfully");
    } catch (error) {
      console.error("Change password error:", error);

      if (error.message === "Current password is incorrect") {
        return ApiResponse.error(res, 400, "Current password is incorrect");
      }

      return ApiResponse.error(res, 500, "Failed to change password");
    }
  },

  verifyRegistration: async (req, res) => {
    const client = await pool.connect();
    try {
      const { email, code } = req.body;

      // Basic validation
      if (!email) {
        return res.status(400).json({
          status: 400,
          message: "Email l√† b·∫Øt bu·ªôc",
        });
      }

      if (!code) {
        return res.status(400).json({
          status: 400,
          message: "M√£ x√°c nh·∫≠n l√† b·∫Øt bu·ªôc",
        });
      }


      console.log(`Verifying registration for ${email} with code ${code}`);

      // Check the column name in verification_codes table
      const tableInfoQuery = `
      SELECT column_name
      FROM information_schema.columns
      WHERE table_name = 'verification_codes'
    `;
      const tableInfo = await client.query(tableInfoQuery);
      console.log(
        "Verification_codes columns:",
        tableInfo.rows.map((row) => row.column_name)
      );

      const hasExpirationTime = tableInfo.rows.some(
        (row) => row.column_name === "expiration_time"
      );
      const hasExpiresAt = tableInfo.rows.some(
        (row) => row.column_name === "expires_at"
      );

      // Use the correct column name based on what's available
      const expirationColumnName = hasExpirationTime
        ? "expiration_time"
        : hasExpiresAt
        ? "expires_at"
        : "expiration_time";

      console.log(
        `Using column name: ${expirationColumnName} for expiration check`
      );

      // Get the verification record using the correct column name
      const verificationResult = await client.query(
        `SELECT * FROM verification_codes
       WHERE email = $1 AND code = $2 AND ${expirationColumnName} > NOW()`,
        [email, code]
      );

      // Ki·ªÉm tra k·∫øt qu·∫£ query cho debugging
      console.log("Verification result:", {
        found: verificationResult.rows.length > 0,
        email: email,
        code: code,
        currentTime: new Date(),
      });

      // Check if verification code exists and is valid
      if (verificationResult.rows.length === 0) {
        return res.status(400).json({
          status: 400,
          message: "M√£ x√°c nh·∫≠n kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Parse user data from verification record
      let userData;
      try {
        const userDataRaw = verificationResult.rows[0].user_data;

        // Handle different data types based on how PostgreSQL returns JSONB
        if (typeof userDataRaw === "string") {
          userData = JSON.parse(userDataRaw);
        } else {
          userData = userDataRaw;
        }

        console.log("User data retrieved successfully:", {
          ...userData,
          password: "[PLAIN]",
        });
      } catch (parseError) {
        console.error("Error parsing user data:", parseError);
        return res.status(500).json({
          status: 500,
          message: "L·ªói x·ª≠ l√Ω d·ªØ li·ªáu ƒëƒÉng k√Ω",
        });
      }

      // Begin transaction for user creation
      await client.query("BEGIN");

      try {
        // Extract user data for registration
        const {
          username,
          email,
          password,
          fullName,
        } = userData;

        // TH√äM KI·ªÇM TRA N√ÄY: Ki·ªÉm tra l·∫°i xem username/email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const checkExistingQuery = `
        SELECT 1 FROM users
        WHERE username = $1 OR email = $2
      `;
        const checkExistingResult = await client.query(checkExistingQuery, [
          username,
          email,
        ]);

        if (checkExistingResult.rows.length > 0) {
          await client.query("ROLLBACK");
          return res.status(400).json({
            status: 400,
            message: "Email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong h·ªá th·ªëng",
          });
        }

        // Use plain password (no hashing)
        const password_hash = password;

        // Insert the new user into database
        const insertUserQuery = `
        INSERT INTO users (
          username, email, password_hash, full_name
        ) VALUES (
          $1, $2, $3, $4
        )
        RETURNING id, username, email, full_name
      `;

        const insertedUser = await client.query(insertUserQuery, [
          username,
          email,
          password_hash,
          fullName,
        ]);

        console.log("User created successfully with ID:", insertedUser.rows[0].id);

        // Delete the verification code after successful registration
        await client.query(`DELETE FROM verification_codes WHERE email = $1`, [
          email,
        ]);

        // Commit transaction
        await client.query("COMMIT");

        // Return success response
        return res.status(201).json({
          status: '200',
          message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
          data: {
            id: insertedUser.rows[0].id,
            username: insertedUser.rows[0].username,
            email: insertedUser.rows[0].email,
            fullName: insertedUser.rows[0].full_name,
          },
        });
      } catch (dbError) {
        // Rollback transaction on error
        await client.query("ROLLBACK");
        console.error("Error creating user:", dbError);

        // Specific error messages for common issues
        if (dbError.code === "23505") {
          // Unique violation
          if (dbError.constraint && dbError.constraint.includes("username")) {
            return res.status(400).json({
              status: 400,
              message: "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i",
            });
          } else if (dbError.constraint && dbError.constraint.includes("email")) {
            return res.status(400).json({
              status: 400,
              message: "Email ƒë√£ t·ªìn t·∫°i",
            });
          }
        }

        return res.status(500).json({
          status: 500,
          message: "ƒêƒÉng k√Ω th·∫•t b·∫°i",
          error: dbError.message,
        });
      }
    } catch (error) {
      try {
        await client.query("ROLLBACK");
      } catch (rollbackError) {
        console.error("Error rolling back transaction:", rollbackError);
      }

      console.error("L·ªói x√°c nh·∫≠n ƒëƒÉng k√Ω:", error);
      return res.status(500).json({
        status: 500,
        message: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.",
        error: error.message,
      });
    } finally {
      client.release();
    }
  },
  token: async (req, res) => {
    const { token } = req.body;

    if (!token) return res.sendStatus(401);
    if (!refreshTokens.includes(token)) return res.sendStatus(403);

    jwt.verify(token, process.env.REFRESH_SECRET_KEY, (err, user) => {
      if (err) return res.sendStatus(403);
      const accessToken = generateAccessToken({ username: user.username });
      res.status('200').json({ accessToken });
    });
  },

  // Update the function to include role in token
  generateAccessToken(user) {
    return jwt.sign(
      {
        userId: user.userId,
        username: user.username,
        email: user.email,
        role: user.role || "customer",
      },
      process.env.JWT_SECRET_KEY,
      { expiresIn: "'200'0h" }
    );
  },

  getReferralInfo: async (req, res) => {
    try {
      const userId = req.user.userId; // Fixed from req.useruserid
      const referralInfo = await UserModel.getReferralInfo(userId);

      res.status('200').json({
        status: '200',
        data: referralInfo,
      });
    } catch (error) {
      res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin gi·ªõi thi·ªáu",
        error: error.message,
      });
    }
  },

  // Add an endpoint to update commission rates (admin only)
  updateCommissionRates: async (req, res) => {
    try {
      const { rates } = req.body;

      if (!rates || !Array.isArray(rates)) {
        return res.status(400).json({
          status: 400,
          message: "C·∫ßn cung c·∫•p d·ªØ li·ªáu t·ª∑ l·ªá hoa h·ªìng h·ª£p l·ªá",
        });
      }

      const client = await pool.connect();
      try {
        await client.query("BEGIN");

        for (const rate of rates) {
          if (
            !rate.level ||
            rate.level < 1 ||
            rate.level > 5 ||
            !rate.rate ||
            rate.rate < 0
          ) {
            throw new Error(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá cho c·∫•p ${rate.level}`);
          }

          await client.query(
            `UPDATE referral_commission_rates
           SET rate = $1, updated_at = NOW()
           WHERE level = $2`,
            [rate.rate, rate.level]
          );
        }

        await client.query("COMMIT");

        res.status('200').json({
          status: '200',
          message: "C·∫≠p nh·∫≠t t·ª∑ l·ªá hoa h·ªìng th√†nh c√¥ng",
        });
      } catch (error) {
        await client.query("ROLLBACK");
        throw error;
      } finally {
        client.release();
      }
    } catch (error) {
      console.error("Error updating commission rates:", error);
      res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t·ª∑ l·ªá hoa h·ªìng",
        error: error.message,
      });
    }
  },

  // Add endpoint to get detailed network structure
  getReferralNetwork: async (req, res) => {
    try {
      const userId = req.user.userId; // Fixed from req.useruserid
      const { level = 1 } = req.query;

      // Validate level
      const parsedLevel = parseInt(level);
      if (isNaN(parsedLevel) || parsedLevel < 1 || parsedLevel > 5) {
        return res.status(400).json({
          status: 400,
          message: "C·∫•p ƒë·ªô ph·∫£i t·ª´ 1 ƒë·∫øn 5",
        });
      }

      const query = `
      SELECT
        u.user_id,
        u.username,
        u.full_name,
        u.email,
        u.created_at,
        rt.level,
        (SELECT COUNT(*) FROM referral_tree WHERE ancestor_id = u.user_id AND level = 1) as direct_referrals,
        (SELECT COALESCE(SUM(amount), 0) FROM wallet_transactions
         WHERE user_id = $1 AND reference_id = u.user_id AND transaction_type = 'referral_commission') as commission_earned
      FROM referral_tree rt
      JOIN users u ON rt.user_id = u.user_id
      WHERE rt.ancestor_id = $1 AND rt.level = $2
      ORDER BY u.created_at DESC
    `;

      const result = await pool.query(query, [userId, parsedLevel]);

      res.status('200').json({
        status: '200',
        data: {
          level: parsedLevel,
          members: result.rows,
        },
      });
    } catch (error) {
      console.error("Error getting referral network:", error);
      res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m·∫°ng l∆∞·ªõi gi·ªõi thi·ªáu",
        error: error.message,
      });
    }
  },

  getWalletTransactions: async (req, res) => {
    try {
      const userId = req.user.userId;
      const { page, limit } = getPaginationParams(req);

      const result = await UserModel.getWalletTransactions(userId, page, limit);

      res.status('200').json({
        status: '200',
        data: result.transactions,
        pagination: result.pagination,
      });
    } catch (error) {
      res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ giao d·ªãch",
        error: error.message,
      });
    }
  },

  withdrawFromWallet: async (req, res) => {
    try {
      const userId = req.user.userId;
      const { amount, bankName, accountNumber, accountHolder } = req.body;

      if (
        !amount ||
        amount <= 0 ||
        !bankName ||
        !accountNumber ||
        !accountHolder
      ) {
        return res.status(400).json({
          status: 400,
          message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin r√∫t ti·ªÅn",
        });
      }

      const result = await UserModel.withdrawFromWallet(userId, amount, {
        bankName,
        accountNumber,
        accountHolder,
      });

      res.status('200').json({
        status: '200',
        message: result.message,
        data: {
          transactionId: result.transactionId,
          amount: result.amount,
        },
      });
    } catch (error) {
      res.status(400).json({
        status: 400,
        message: error.message,
      });
    }
  },

  forgotPassword: async (req, res) => {
    try {
      const { email } = req.body;

      if (!email) {
        return res.status(400).json({
          status: 400,
          message: "Email l√† b·∫Øt bu·ªôc",
        });
      }

      // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
      const user = await UserModel.findByEmail(email);
      if (!user) {
        return res.status(404).json({
          status: 404,
          message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y",
        });
      }

      // T·∫°o m√£ x√°c nh·∫≠n ng·∫´u nhi√™n (6 ch·ªØ s·ªë)
      const code = Math.floor(100000 + Math.random() * 900000).toString();

      // T·∫°o d·ªØ li·ªáu l∆∞u v√†o user_data (c·∫ßn ƒë∆∞·ª£c l∆∞u v√¨ b·∫£ng y√™u c·∫ßu NOT NULL)
      const userData = {
        type: "password_reset",
        email: email,
      };

      // X√≥a m√£ x√°c nh·∫≠n c≈© (n·∫øu c√≥)
      await pool.query(`DELETE FROM verification_codes WHERE email = $1`, [
        email,
      ]);

      // Th√™m m√£ x√°c nh·∫≠n m·ªõi v·ªõi expiration time 15 ph√∫t
      const expirationTime = new Date();
      expirationTime.setMinutes(expirationTime.getMinutes() + 15);

      // Check if verification_codes table exists and has the correct column name
      try {
        const tableInfoQuery = `
        SELECT column_name
        FROM information_schema.columns
        WHERE table_name = 'verification_codes'
      `;
        const tableInfo = await pool.query(tableInfoQuery);
        console.log(
          "Verification_codes columns:",
          tableInfo.rows.map((row) => row.column_name)
        );

        const hasExpirationTime = tableInfo.rows.some(
          (row) => row.column_name === "expiration_time"
        );
        const hasExpiresAt = tableInfo.rows.some(
          (row) => row.column_name === "expires_at"
        );

        // Use the correct column name based on what's available
        const expirationColumnName = hasExpirationTime
          ? "expiration_time"
          : hasExpiresAt
          ? "expires_at"
          : "expiration_time";

        console.log(
          `Using column name: ${expirationColumnName} for expiration time`
        );

        // Insert the new verification record using the correct column name
        if (hasExpiresAt) {
          // Use the existing table structure with expires_at
          await pool.query(
            `INSERT INTO verification_codes (email, code, expires_at, code_type, verified, attempts, max_attempts, user_data, created_at, updated_at)
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())`,
            [email, code, expirationTime, 'password_reset', false, 0, 3, JSON.stringify(userData)]
          );
        } else {
          // Use the new table structure with expiration_time
          await pool.query(
            `INSERT INTO verification_codes (email, code, ${expirationColumnName}, user_data, created_at)
             VALUES ($1, $2, $3, $4, NOW())`,
            [email, code, expirationTime, JSON.stringify(userData)]
          );
        }
      } catch (dbError) {
        console.error("Database error during table check:", dbError);
        // If the table doesn't exist or other DB issues, create it
        await pool.query(`
        CREATE TABLE IF NOT EXISTS verification_codes (
          id SERIAL PRIMARY KEY,
          email VARCHAR(255) NOT NULL,
          code VARCHAR(10) NOT NULL,
          expiration_time TIMESTAMP NOT NULL,
          user_data JSONB NOT NULL,
          created_at TIMESTAMP DEFAULT NOW()
        )
      `);

        // Then try the insert again with the new structure
        await pool.query(
          `INSERT INTO verification_codes (email, code, expiration_time, user_data, created_at)
         VALUES ($1, $2, $3, $4, NOW())`,
          [email, code, expirationTime, JSON.stringify(userData)]
        );
      }

      // G·ª≠i email ch·ª©a m√£ x√°c nh·∫≠n
      await sendRandomCodeEmail(email, code);

      // Log m√£ x√°c nh·∫≠n (ch·ªâ d√πng cho m√¥i tr∆∞·ªùng ph√°t tri·ªÉn)
      console.log(`Verification code for password reset: ${code}`);

      return res.status('200').json({
        status: '200',
        message: "M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n",
      });
    } catch (error) {
      console.error("L·ªói qu√™n m·∫≠t kh·∫©u:", error);
      return res.status(500).json({
        status: 500,
        message: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.",
      });
    }
  },

    resetPassword: async (req, res) => {
    try {
      console.log('üîç Reset Password Request (No OTP):', {
        body: req.body,
        email: req.body.email,
        newPassword: req.body.newPassword,
        new_password: req.body.new_password,
        headers: req.headers['content-type']
      });

      // Support both field names for backward compatibility
      const { email, new_password } = req.body;
      const finalPassword = new_password;

      console.log('üîç Extracted values:', {
        email,
        new_password,
        finalPassword
      });

      if (!email || !finalPassword) {
        console.log('‚ùå Missing fields check:', {
          emailMissing: !email,
          new_passwordMissing: !new_password,
          finalPasswordMissing: !finalPassword
        });
        return res.status(400).json({
          status: 400,
          message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt",
        });
      }

      if (finalPassword.length < 6) {
        return res.status(400).json({
          status: 400,
          message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
        });
      }

      // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
      const userCheck = await pool.query(
        'SELECT id FROM users WHERE email = $1',
        [email]
      );

      if (userCheck.rows.length === 0) {
        return res.status(404).json({
          status: 404,
          message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng",
        });
      }

      console.log('‚úÖ Email found in database, proceeding with password update');

      // Use plain password (no hashing)
      const plainPassword = finalPassword;

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong c∆° s·ªü d·ªØ li·ªáu
      const updateResult = await pool.query(
        `UPDATE users
       SET password_hash = $1, updated_at = NOW()
       WHERE email = $2
       RETURNING id, email`,
        [plainPassword, email]
      );

      if (updateResult.rows.length === 0) {
        return res.status(404).json({
          status: 404,
          message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y",
        });
      }

      console.log('‚úÖ Password updated successfully for:', email);

      return res.status('200').json({
        status: '200',
        message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng",
      });
    } catch (error) {
      console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
      return res.status(500).json({
        status: 500,
        message: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.",
      });
    }
  },

  // Verify OTP - Ch·ª©c nƒÉng x√°c th·ª±c OTP t·ªïng qu√°t
  verifyOTP: async (req, res) => {
    try {
      const { email, code, type = 'general' } = req.body;

      // Basic validation
      if (!email) {
        return res.status(400).json({
          status: 400,
          message: "Email l√† b·∫Øt bu·ªôc",
        });
      }

      if (!code) {
        return res.status(400).json({
          status: 400,
          message: "M√£ OTP l√† b·∫Øt bu·ªôc",
        });
      }

      console.log(`Verifying OTP for ${email} with code ${code} and type ${type}`);

      // Check column name compatibility
      const tableInfoQuery = `
        SELECT column_name
        FROM information_schema.columns
        WHERE table_name = 'verification_codes'
      `;
      const tableInfo = await pool.query(tableInfoQuery);

      const hasExpirationTime = tableInfo.rows.some(
        (row) => row.column_name === "expiration_time"
      );
      const hasExpiresAt = tableInfo.rows.some(
        (row) => row.column_name === "expires_at"
      );

      // Use the correct column name based on what's available
      const expirationColumnName = hasExpirationTime
        ? "expiration_time"
        : hasExpiresAt
        ? "expires_at"
        : "expiration_time";

      console.log(
        `Using column name: ${expirationColumnName} for expiration check`
      );

      // Get the verification record using the correct column name
      const verificationResult = await pool.query(
        `SELECT * FROM verification_codes
         WHERE email = $1 AND code = $2 AND ${expirationColumnName} > NOW()`,
        [email, code]
      );

      console.log("OTP verification result:", {
        found: verificationResult.rows.length > 0,
        email: email,
        code: code,
        type: type,
        currentTime: new Date(),
      });

      // Check if OTP exists and is valid
      if (verificationResult.rows.length === 0) {
        return res.status(400).json({
          status: 400,
          message: "M√£ OTP kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      const verificationData = verificationResult.rows[0];

      // Parse user_data if exists
      let userData = null;
      if (verificationData.user_data) {
        try {
          if (typeof verificationData.user_data === "string") {
            userData = JSON.parse(verificationData.user_data);
          } else {
            userData = verificationData.user_data;
          }
        } catch (parseError) {
          console.error("Error parsing user_data:", parseError);
        }
      }

      // Determine verification type from data
      let verificationType = type;
      if (userData && userData.type) {
        verificationType = userData.type;
      } else if (verificationData.code_type) {
        verificationType = verificationData.code_type;
      }

      console.log(`OTP verification successful for type: ${verificationType}`);

      // Return success response with verification info
      const response = {
        status: '200',
        message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng",
        data: {
          email: email,
          type: verificationType,
          verified: true,
          verifiedAt: new Date(),
        }
      };

      // Add user data if available (but not for password reset for security)
      if (userData && verificationType !== 'password_reset') {
        response.data.userData = {
          ...userData,
          password: "[HIDDEN]" // Hide password in response
        };
      }

      return res.status(200).json(response);

    } catch (error) {
      console.error("OTP verification error:", error);
      return res.status(500).json({
        status: 500,
        message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x√°c th·ª±c OTP",
        error: error.message,
      });
    }
  },

  getReferralShareContent: async (req, res) => {
    try {
      const userId = req.user.userId;
      const appUrl = process.env.APP_URL || "https://yourapp.com";

      // Get user's referral code
      const user = await UserModel.getUserById(userId);

      if (!user) {
        return res.status(404).json({
          status: 404,
          message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
        });
      }

      // Generate sharing content
      const referralCode = user.referralcode;
      const referralLink = `${appUrl}/register?ref=${referralCode}`;

      const sharingContent = {
        referralCode,
        referralLink,
        whatsappMessage: `ƒêƒÉng k√Ω ngay t·∫°i ${referralLink} ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑t m√≥n ƒÉn! Nh·∫≠p m√£ ${referralCode} khi ƒëƒÉng k√Ω.`,
        smsMessage: `D√πng m√£ ${referralCode} ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i khi ƒëƒÉng k√Ω t·∫°i nh√† h√†ng ch√∫ng t√¥i!`,
        emailSubject: "L·ªùi m·ªùi ƒëƒÉng k√Ω t·ª´ nh√† h√†ng ABC",
        emailBody: `Xin ch√†o,\n\nT√¥i xin m·ªùi b·∫°n ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i nh√† h√†ng ABC. S·ª≠ d·ª•ng m√£ gi·ªõi thi·ªáu ${referralCode} ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát.\n\nƒêƒÉng k√Ω t·∫°i: ${referralLink}\n\nC·∫£m ∆°n b·∫°n!`,
      };

      res.status('200').json({
        status: '200',
        data: sharingContent,
      });
    } catch (error) {
      console.error("L·ªói l·∫•y n·ªôi dung chia s·∫ª:", error);
      res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ t·∫°o n·ªôi dung chia s·∫ª",
        error: error.message,
      });
    }
  },

  getUserProfile: async (req, res) => {
    try {
      const userId = req.user.userId;

      const user = await UserModel.getUserById(userId);

      if (!user) {
        return res.status(404).json({
          status: 500,
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
        });
      }

      // Remove sensitive information
      const { Password, ...userProfile } = user;

      // ƒê·∫£m b·∫£o address ƒë∆∞·ª£c bao g·ªìm trong response
      res.status('200').json({
        status: '200',
        data: [userProfile], // address ƒë√£ ƒë∆∞·ª£c bao g·ªìm trong userProfile
      });
    } catch (error) {
      console.error("L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
      res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
        error: error.message,
      });
    }
  },

  updateUserProfile: async (req, res) => {
    try {
      const userId = req.user.userId;
      const { fullName, phoneNumber, address, avatar_id } = req.body;

      const updatedUserData = await UserModel.updateUser(userId, {
        fullName,
        phoneNumber,
        address,
        avatar_id,
      });

      if (!updatedUserData) {
        return res.status(400).json({
          status: 400,
          message: "Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
        });
      }

      res.status('200').json({
        status: '200',
        message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
        data: updatedUserData,
      });
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", error);
      res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng",
        error: error.message,
      });
    }
  },

  uploadAvatar: async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({
          status: 400,
          message: "Kh√¥ng c√≥ file ƒë∆∞·ª£c upload",
        });
      }

      // ƒê·ªëi v·ªõi storage l√† diskStorage
      const filePath = req.file.path;

      // Upload l√™n Cloudinary
      const cloudinaryResult = await cloudinary.uploader.upload(filePath, {
        folder: "food_api/avatars",
        transformation: [{ width: 500, height: 500, crop: "limit" }],
      });

      // X√≥a file t·∫°m sau khi upload
      fs.unlinkSync(filePath);

      // C·∫≠p nh·∫≠t avatar c·ªßa ng∆∞·ªùi d√πng trong database
      const updatedUser = await UserModel.updateUser(req.user.userId, {
        avatar: cloudinaryResult.secure_url,
      });

      if (!updatedUser) {
        return res.status(400).json({
          status: 500,
          message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t avatar",
        });
      }

      return res.status('200').json({
        status: '200',
        message: "Upload avatar th√†nh c√¥ng",
        data: {
          avatar: cloudinaryResult.secure_url,
          user: updatedUser,
        },
      });
    } catch (error) {
      console.error("L·ªói upload avatar:", error);

      // X√≥a file t·∫°m n·∫øu c√≥ l·ªói x·∫£y ra
      if (req.file && req.file.path) {
        fs.unlink(req.file.path, (err) => {
          if (err) console.error("Kh√¥ng th·ªÉ x√≥a file t·∫°m:", err);
        });
      }

      res.status(500).json({
        status: 500,
        message: "L·ªói khi upload avatar",
        error: error.message,
      });
    }
  },

  // L·∫•y danh s√°ch avatar m·∫´u t·ª´ DB
  getAvatars: async (req, res) => {
    try {
      const avatars = await getAvatarListFromDb();
      return res.status('200').json({
        status: 200,
        data: avatars
      });
    } catch (error) {
      return res.status(500).json({
        status: 500,
        message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch avatar",
        error: error.message
      });
    }
  },
};

module.exports = userController;
