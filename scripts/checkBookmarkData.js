const { pool } = require('../config/database');

async function checkBookmarkData() {
  try {
    console.log('üîç Checking bookmark data...');

    // Ki·ªÉm tra b·∫£ng user_bookmarks
    console.log('\nüìä User Bookmarks:');
    const bookmarksResult = await pool.query('SELECT * FROM user_bookmarks LIMIT 10');
    if (bookmarksResult.rows.length > 0) {
      console.table(bookmarksResult.rows);
    } else {
      console.log('‚ùå Kh√¥ng c√≥ bookmark n√†o trong database');
    }

    // Ki·ªÉm tra t·ª´ c√≥ ID = 26
    console.log('\nüìñ Word ID = 26:');
    const wordResult = await pool.query('SELECT * FROM words WHERE id = 26');
    if (wordResult.rows.length > 0) {
      console.table(wordResult.rows);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y t·ª´ c√≥ ID = 26');
    }

    // Ki·ªÉm tra user c√≥ ID = 9
    console.log('\nüë§ User ID = 9:');
    const userResult = await pool.query('SELECT id, username, email FROM users WHERE id = 9');
    if (userResult.rows.length > 0) {
      console.table(userResult.rows);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y user c√≥ ID = 9');
    }

    // Ki·ªÉm tra bookmark c·ª• th·ªÉ user_id=9, word_id=26
    console.log('\nüîñ Bookmark user_id=9, word_id=26:');
    const specificBookmark = await pool.query(
      'SELECT * FROM user_bookmarks WHERE user_id = 9 AND word_id = 26'
    );
    if (specificBookmark.rows.length > 0) {
      console.table(specificBookmark.rows);
      console.log('‚úÖ Bookmark t·ªìn t·∫°i - c√≥ th·ªÉ x√≥a ƒë∆∞·ª£c');
    } else {
      console.log('‚ùå Bookmark KH√îNG t·ªìn t·∫°i - kh√¥ng th·ªÉ x√≥a');
    }

    // T·∫°o bookmark test ƒë·ªÉ c√≥ th·ªÉ x√≥a
    console.log('\nüîß T·∫°o bookmark test...');
    try {
      await pool.query(
        'INSERT INTO user_bookmarks (user_id, word_id, notes) VALUES (9, 26, $1) ON CONFLICT (user_id, word_id) DO NOTHING',
        ['Test bookmark for deletion']
      );
      console.log('‚úÖ ƒê√£ t·∫°o bookmark test user_id=9, word_id=26');
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói t·∫°o bookmark test:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

// Ch·∫°y script
checkBookmarkData();
